// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>
#include "helpers.h"
#include "Str.h"

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// power_vector
NumericVector power_vector(NumericVector x, double power);
RcppExport SEXP _testRcppNew_power_vector(SEXP xSEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(power_vector(x, power));
    return rcpp_result_gen;
END_RCPP
}
// sqrt_vector
NumericVector sqrt_vector(NumericVector x);
RcppExport SEXP _testRcppNew_sqrt_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sqrt_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// sum_vector
double sum_vector(NumericVector x);
RcppExport SEXP _testRcppNew_sum_vector(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_vector(x));
    return rcpp_result_gen;
END_RCPP
}
// divide_vector
NumericVector divide_vector(NumericVector x, double divisor);
RcppExport SEXP _testRcppNew_divide_vector(SEXP xSEXP, SEXP divisorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type divisor(divisorSEXP);
    rcpp_result_gen = Rcpp::wrap(divide_vector(x, divisor));
    return rcpp_result_gen;
END_RCPP
}
// multiply_vector
NumericVector multiply_vector(NumericVector x, double multiplier);
RcppExport SEXP _testRcppNew_multiply_vector(SEXP xSEXP, SEXP multiplierSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type multiplier(multiplierSEXP);
    rcpp_result_gen = Rcpp::wrap(multiply_vector(x, multiplier));
    return rcpp_result_gen;
END_RCPP
}
// toTable
std::map<std::string, double> toTable(NumericVector x);
RcppExport SEXP _testRcppNew_toTable(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(toTable(x));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rminstd_rand0<NumericVector>
template NumericVector Random::Rminstd_rand0<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_minstd_rand0(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rminstd_rand0<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rminstd_rand<NumericVector>
template NumericVector Random::Rminstd_rand<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_minstd_rand(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rminstd_rand<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rmt19937<NumericVector>
template NumericVector Random::Rmt19937<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_mt19937(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rmt19937<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rmt19937_64<NumericVector>
template NumericVector Random::Rmt19937_64<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_mt19937_64(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rmt19937_64<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rranlux24_base<NumericVector>
template NumericVector Random::Rranlux24_base<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_ranlux24_base(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rranlux24_base<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rranlux48_base<NumericVector>
template NumericVector Random::Rranlux48_base<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_ranlux48_base(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rranlux48_base<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rranlux24<NumericVector>
template NumericVector Random::Rranlux24<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_ranlux24(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rranlux24<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rranlux48<NumericVector>
template NumericVector Random::Rranlux48<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_ranlux48(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rranlux48<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rknuth_b<NumericVector>
template NumericVector Random::Rknuth_b<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_knuth_b(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rknuth_b<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rdefault_random_engine<NumericVector>
template NumericVector Random::Rdefault_random_engine<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_default_random_engine(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rdefault_random_engine<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rsubtract_with_carry_engine<NumericVector>
template NumericVector Random::Rsubtract_with_carry_engine<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_subtract_with_carry_engine(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rsubtract_with_carry_engine<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::Rsubtract_with_carry_engine_64<NumericVector>
template NumericVector Random::Rsubtract_with_carry_engine_64<NumericVector>(std::size_t length);
RcppExport SEXP _testRcppNew_subtract_with_carry_engine_64(SEXP lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::size_t >::type length(lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::Rsubtract_with_carry_engine_64<NumericVector>(length));
    return rcpp_result_gen;
END_RCPP
}
// Random::sample<NumericVector>
template NumericVector Random::sample<NumericVector>(NumericVector x, std::size_t size, bool replace);
RcppExport SEXP _testRcppNew_sample(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::sample<NumericVector>(x, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// Random::sample<IntegerVector>
template IntegerVector Random::sample<IntegerVector>(IntegerVector x, std::size_t size, bool replace);
RcppExport SEXP _testRcppNew_sample_int(SEXP xSEXP, SEXP sizeSEXP, SEXP replaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type replace(replaceSEXP);
    rcpp_result_gen = Rcpp::wrap(Random::sample<IntegerVector>(x, size, replace));
    return rcpp_result_gen;
END_RCPP
}
// Str::containsSubstring
bool Str::containsSubstring(std::string str, std::string substr);
RcppExport SEXP _testRcppNew_containsSubstring(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(Str::containsSubstring(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// Str::toUpperCase
std::string Str::toUpperCase(std::string s);
RcppExport SEXP _testRcppNew_toUpperCase(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(Str::toUpperCase(s));
    return rcpp_result_gen;
END_RCPP
}
// Str::trim
std::string Str::trim(std::string s);
RcppExport SEXP _testRcppNew_trim(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(Str::trim(s));
    return rcpp_result_gen;
END_RCPP
}
// Str::startsWith
bool Str::startsWith(std::string str, std::string substr);
RcppExport SEXP _testRcppNew_startsWith(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(Str::startsWith(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// Str::endsWith
bool Str::endsWith(std::string str, std::string substr);
RcppExport SEXP _testRcppNew_endsWith(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type str(strSEXP);
    Rcpp::traits::input_parameter< std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(Str::endsWith(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// Str::replaceSubstring
std::string Str::replaceSubstring(std::string s, std::string oldSubstr, std::string newSubstr);
RcppExport SEXP _testRcppNew_replaceSubstring(SEXP sSEXP, SEXP oldSubstrSEXP, SEXP newSubstrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type s(sSEXP);
    Rcpp::traits::input_parameter< std::string >::type oldSubstr(oldSubstrSEXP);
    Rcpp::traits::input_parameter< std::string >::type newSubstr(newSubstrSEXP);
    rcpp_result_gen = Rcpp::wrap(Str::replaceSubstring(s, oldSubstr, newSubstr));
    return rcpp_result_gen;
END_RCPP
}
// Str::toTable
std::map<std::string, double> Str::toTable(std::string x);
RcppExport SEXP _testRcppNew_toTable_char(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Str::toTable(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_testRcppNew_power_vector", (DL_FUNC) &_testRcppNew_power_vector, 2},
    {"_testRcppNew_sqrt_vector", (DL_FUNC) &_testRcppNew_sqrt_vector, 1},
    {"_testRcppNew_sum_vector", (DL_FUNC) &_testRcppNew_sum_vector, 1},
    {"_testRcppNew_divide_vector", (DL_FUNC) &_testRcppNew_divide_vector, 2},
    {"_testRcppNew_multiply_vector", (DL_FUNC) &_testRcppNew_multiply_vector, 2},
    {"_testRcppNew_toTable", (DL_FUNC) &_testRcppNew_toTable, 1},
    {"_testRcppNew_minstd_rand0", (DL_FUNC) &_testRcppNew_minstd_rand0, 1},
    {"_testRcppNew_minstd_rand", (DL_FUNC) &_testRcppNew_minstd_rand, 1},
    {"_testRcppNew_mt19937", (DL_FUNC) &_testRcppNew_mt19937, 1},
    {"_testRcppNew_mt19937_64", (DL_FUNC) &_testRcppNew_mt19937_64, 1},
    {"_testRcppNew_ranlux24_base", (DL_FUNC) &_testRcppNew_ranlux24_base, 1},
    {"_testRcppNew_ranlux48_base", (DL_FUNC) &_testRcppNew_ranlux48_base, 1},
    {"_testRcppNew_ranlux24", (DL_FUNC) &_testRcppNew_ranlux24, 1},
    {"_testRcppNew_ranlux48", (DL_FUNC) &_testRcppNew_ranlux48, 1},
    {"_testRcppNew_knuth_b", (DL_FUNC) &_testRcppNew_knuth_b, 1},
    {"_testRcppNew_default_random_engine", (DL_FUNC) &_testRcppNew_default_random_engine, 1},
    {"_testRcppNew_subtract_with_carry_engine", (DL_FUNC) &_testRcppNew_subtract_with_carry_engine, 1},
    {"_testRcppNew_subtract_with_carry_engine_64", (DL_FUNC) &_testRcppNew_subtract_with_carry_engine_64, 1},
    {"_testRcppNew_sample", (DL_FUNC) &_testRcppNew_sample, 3},
    {"_testRcppNew_sample_int", (DL_FUNC) &_testRcppNew_sample_int, 3},
    {"_testRcppNew_containsSubstring", (DL_FUNC) &_testRcppNew_containsSubstring, 2},
    {"_testRcppNew_toUpperCase", (DL_FUNC) &_testRcppNew_toUpperCase, 1},
    {"_testRcppNew_trim", (DL_FUNC) &_testRcppNew_trim, 1},
    {"_testRcppNew_startsWith", (DL_FUNC) &_testRcppNew_startsWith, 2},
    {"_testRcppNew_endsWith", (DL_FUNC) &_testRcppNew_endsWith, 2},
    {"_testRcppNew_replaceSubstring", (DL_FUNC) &_testRcppNew_replaceSubstring, 3},
    {"_testRcppNew_toTable_char", (DL_FUNC) &_testRcppNew_toTable_char, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_testRcppNew(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
